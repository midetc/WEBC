
import sqlite3
from datetime import datetime, timedelta
import random
from passlib.context import CryptContext

def check_database():
    try:
        conn = sqlite3.connect('data.db')
        cursor = conn.cursor()
        

        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        
        print("=== –ü–ï–†–ï–í–Ü–†–ö–ê –ë–ê–ó–ò –î–ê–ù–ò–• ===")
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—å: {len(tables)}")
        print(f"–°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü—å: {[table[0] for table in tables]}")
        print()
        

        for table in tables:
            table_name = table[0]
            print(f"üìã –¢–∞–±–ª–∏—Ü—è: {table_name}")
            cursor.execute(f"PRAGMA table_info({table_name});")
            columns = cursor.fetchall()
            
            for column in columns:
                col_id, col_name, col_type, not_null, default_val, pk = column
                pk_mark = " (PK)" if pk else ""
                null_mark = " NOT NULL" if not_null else ""
                print(f"  ‚îú‚îÄ {col_name}: {col_type}{pk_mark}{null_mark}")
            

            cursor.execute(f"SELECT COUNT(*) FROM {table_name};")
            count = cursor.fetchone()[0]
            print(f"  ‚îî‚îÄ –ó–∞–ø–∏—Å—ñ–≤: {count}")
            print()
        
        conn.close()
        print("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ë–î: {e}")

def seed_database():
    try:
        conn = sqlite3.connect('data.db')
        cursor = conn.cursor()
        

        cursor.execute("SELECT COUNT(*) FROM categories WHERE is_default = 1;")
        existing_count = cursor.fetchone()[0]
        
        if existing_count > 0:
            print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å ({existing_count} —à—Ç.)")
            return
        

        default_categories = [
            ("–ü—Ä–æ–¥—É–∫—Ç–∏", "–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è", "#4CAF50", "üõí", 1, None),
            ("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–í–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "#2196F3", "üöó", 1, None),
            ("–†–æ–∑–≤–∞–≥–∏", "–†–æ–∑–≤–∞–≥–∏ —Ç–∞ –¥–æ–∑–≤—ñ–ª–ª—è", "#FF9800", "üé¨", 1, None),
            ("–ó–¥–æ—Ä–æ–≤'—è", "–ú–µ–¥–∏—á–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏", "#F44336", "üè•", 1, None),
            ("–û—Å–≤—ñ—Ç–∞", "–í–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –æ—Å–≤—ñ—Ç—É", "#9C27B0", "üìö", 1, None),
            ("–û–¥—è–≥", "–ü–æ–∫—É–ø–∫–∞ –æ–¥—è–≥—É —Ç–∞ –≤–∑—É—Ç—Ç—è", "#E91E63", "üëï", 1, None),
            ("–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ", "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–ª–∞—Ç–µ–∂—ñ", "#607D8B", "üè†", 1, None),
            ("–Ü–Ω—à–µ", "–Ü–Ω—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏", "#795548", "üì¶", 1, None),
        ]
        
        current_time = datetime.now().isoformat()
        
        print("–î–æ–¥–∞—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó...")
        for name, description, color, icon, is_default, user_id in default_categories:
            cursor.execute("""
                INSERT INTO categories (name, description, color, icon, is_default, created_at, user_id)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (name, description, color, icon, is_default, current_time, user_id))
        
        conn.commit()
        print(f"‚úÖ –î–æ–¥–∞–Ω–æ {len(default_categories)} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
        

        cursor.execute("SELECT name, icon FROM categories WHERE is_default = 1;")
        categories = cursor.fetchall()
        print("\n–°—Ç–≤–æ—Ä–µ–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:")
        for name, icon in categories:
            print(f"  {icon} {name}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—ñ –ë–î: {e}")

def create_realistic_test_data():
    try:
        conn = sqlite3.connect('data.db')
        cursor = conn.cursor()
        

        cursor.execute("SELECT COUNT(*) FROM users;")
        user_count = cursor.fetchone()[0]
        
        if user_count > 0:
            print(f"–¢–µ—Å—Ç–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å ({user_count} —à—Ç.)")
            print("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ 'reset' –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –ë–î –ø–µ—Ä–µ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –Ω–æ–≤–∏—Ö —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö")
            return
        
        print("üé≠ –°—Ç–≤–æ—Ä—é—é —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ...")
        

        cursor.execute("SELECT COUNT(*) FROM categories;")
        cat_count = cursor.fetchone()[0]
        if cat_count == 0:
            print("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—é—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó...")
            seed_database()
        
        current_time = datetime.now().isoformat()
        

        test_users = [
            ("test@example.com", "–¢–µ—Å—Ç–æ–≤–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á", "password123"),
            ("anna.ivanova@gmail.com", "–ê–Ω–Ω–∞ –Ü–≤–∞–Ω–æ–≤–∞", "mypassword"),
            ("dmitry.petrov@outlook.com", "–î–º–∏—Ç—Ä–æ –ü–µ—Ç—Ä–æ–≤", "securepass"),
        ]
        
        print("üë• –°—Ç–≤–æ—Ä—é—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")
        pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
        user_ids = []
        for email, name, password in test_users:
            hashed_password = pwd_context.hash(password)
            cursor.execute("""
                INSERT INTO users (email, hashed_password, name, created_at, updated_at, is_active)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (email, hashed_password, name, current_time, current_time, True))
            user_ids.append(cursor.lastrowid)
        

        cursor.execute("SELECT id, name FROM categories;")
        categories = cursor.fetchall()
        category_map = {name: id for id, name in categories}
        

        print("üí∞ –°—Ç–≤–æ—Ä—é—é –≤–∏—Ç—Ä–∞—Ç–∏...")
        

        realistic_expenses = {
            user_ids[0]: [
                (850, "–ü–æ–∫—É–ø–∫–∏ –≤ –ê–¢–ë", "–ü—Ä–æ–¥—É–∫—Ç–∏", -1),
                (1200, "–ó–∞–∫—É–ø–∫–∞ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å –≤ –°—ñ–ª—å–ø–æ", "–ü—Ä–æ–¥—É–∫—Ç–∏", -3),
                (450, "–•–ª—ñ–± —Ç–∞ –º–æ–ª–æ–∫–æ", "–ü—Ä–æ–¥—É–∫—Ç–∏", -5),
                (2100, "–í–µ–ª–∏–∫–∞ –∑–∞–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤", "–ü—Ä–æ–¥—É–∫—Ç–∏", -7),
                (680, "–û–≤–æ—á—ñ –Ω–∞ —Ä–∏–Ω–∫—É", "–ü—Ä–æ–¥—É–∫—Ç–∏", -10),
                
                (180, "–ü—Ä–æ—ó–∑–¥ —É –º–µ—Ç—Ä–æ", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", -2),
                (350, "–¢–∞–∫—Å—ñ –¥–æ–¥–æ–º—É", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", -4),
                (150, "–ê–≤—Ç–æ–±—É—Å", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", -8),
                (200, "–ú–∞—Ä—à—Ä—É—Ç–∫–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", -12),
                
                (450, "–ö—ñ–Ω–æ –∑ –¥—Ä—É–∑—è–º–∏", "–†–æ–∑–≤–∞–≥–∏", -6),
                (800, "–ö–æ–Ω—Ü–µ—Ä—Ç", "–†–æ–∑–≤–∞–≥–∏", -15),
                (320, "–ö–∞—Ñ–µ", "–†–æ–∑–≤–∞–≥–∏", -9),
                
                (2500, "–ö—É—Ä—Å–∏ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è", "–û—Å–≤—ñ—Ç–∞", -20),
                (450, "–ü—ñ–¥—Ä—É—á–Ω–∏–∫–∏", "–û—Å–≤—ñ—Ç–∞", -25),
                
                (150, "–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä–∏", "–Ü–Ω—à–µ", -11),
                (280, "–ü–æ–¥–∞—Ä—É–Ω–æ–∫ –¥—Ä—É–≥—É", "–Ü–Ω—à–µ", -18),
            ],
            
            user_ids[1]: [
                (1500, "–©–æ—Ç–∏–∂–Ω–µ–≤–∞ –∑–∞–∫—É–ø–∫–∞ –≤ Novus", "–ü—Ä–æ–¥—É–∫—Ç–∏", -1),
                (2800, "–í–µ–ª–∏–∫–∞ –∑–∞–∫—É–ø–∫–∞ –≤ Metro", "–ü—Ä–æ–¥—É–∫—Ç–∏", -7),
                (650, "–§—Ä—É–∫—Ç–∏ —Ç–∞ –æ–≤–æ—á—ñ", "–ü—Ä–æ–¥—É–∫—Ç–∏", -3),
                (1200, "–ü—Ä–æ–¥—É–∫—Ç–∏ –Ω–∞ –≤–∏—Ö—ñ–¥–Ω—ñ", "–ü—Ä–æ–¥—É–∫—Ç–∏", -10),
                (890, "–î–∏—Ç—è—á–µ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è", "–ü—Ä–æ–¥—É–∫—Ç–∏", -14),
                
                (1200, "–ó–∞–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", -2),
                (800, "–ó–∞–ø—Ä–∞–≤–∫–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", -9),
                (450, "–ü–∞—Ä–∫–æ–≤–∫–∞ –≤ —Ü–µ–Ω—Ç—Ä—ñ", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", -5),
                
                (1800, "–í—ñ–∑–∏—Ç –¥–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞", "–ó–¥–æ—Ä–æ–≤'—è", -12),
                (650, "–õ—ñ–∫–∏ –≤ –∞–ø—Ç–µ—Ü—ñ", "–ó–¥–æ—Ä–æ–≤'—è", -8),
                (2200, "–ê–Ω–∞–ª—ñ–∑–∏ –≤ –∫–ª—ñ–Ω—ñ—Ü—ñ", "–ó–¥–æ—Ä–æ–≤'—è", -20),
                
                (3500, "–ó–∏–º–æ–≤–∞ –∫—É—Ä—Ç–∫–∞", "–û–¥—è–≥", -15),
                (1200, "–í–∑—É—Ç—Ç—è –¥–ª—è –¥–∏—Ç–∏–Ω–∏", "–û–¥—è–≥", -22),
                (850, "–î–∂–∏–Ω—Å–∏", "–û–¥—è–≥", -30),
                
                (2100, "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–ª–∞—Ç–µ–∂—ñ", "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ", -1),
                (2050, "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–ª–∞—Ç–µ–∂—ñ", "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ", -31),
                (2180, "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–ª–∞—Ç–µ–∂—ñ", "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ", -61),
                
                (1200, "–°—ñ–º–µ–π–Ω–∏–π –ø–æ—Ö—ñ–¥ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–†–æ–∑–≤–∞–≥–∏", -4),
                (650, "–î–∏—Ç—è—á—ñ —Ä–æ–∑–≤–∞–≥–∏", "–†–æ–∑–≤–∞–≥–∏", -11),
                (2800, "–í—ñ–¥–ø—É—Å—Ç–∫–∞ –Ω–∞ –≤–∏—Ö—ñ–¥–Ω—ñ", "–†–æ–∑–≤–∞–≥–∏", -25),
            ],
            
            user_ids[2]: [
                 (1800, "–ó–∞–∫—É–ø–∫–∞ –≤ –ê—à–∞–Ω", "–ü—Ä–æ–¥—É–∫—Ç–∏", -2),
                 (950, "–ü—Ä–æ–¥—É–∫—Ç–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å", "–ü—Ä–æ–¥—É–∫—Ç–∏", -9),
                 (1200, "–î–µ–ª—ñ–∫–∞—Ç–µ—Å–∏", "–ü—Ä–æ–¥—É–∫—Ç–∏", -16),
                 (750, "–°–Ω—ñ–¥–∞–Ω–æ–∫ –≤ –∫–∞—Ñ–µ", "–ü—Ä–æ–¥—É–∫—Ç–∏", -4),
                 
                 (2500, "–¢–µ—Ö–æ–≥–ª—è–¥ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", -18),
                 (1500, "–ó–∞–ø—Ä–∞–≤–∫–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", -3),
                 (1200, "–ó–∞–ø—Ä–∞–≤–∫–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", -12),
                 (350, "–¢–∞–∫—Å—ñ", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", -6),
                 
                 (3200, "–Ü–≥—Ä–æ–≤–∞ –∫–æ–Ω—Å–æ–ª—å", "–†–æ–∑–≤–∞–≥–∏", -21),
                 (850, "–ö—ñ–Ω–æ IMAX", "–†–æ–∑–≤–∞–≥–∏", -7),
                 (1500, "–†–µ—Å—Ç–æ—Ä–∞–Ω –∑ –∫–æ–ª–µ–≥–∞–º–∏", "–†–æ–∑–≤–∞–≥–∏", -14),
                 (650, "–ë–æ—É–ª—ñ–Ω–≥", "–†–æ–∑–≤–∞–≥–∏", -28),
                 
                 (4500, "–û–Ω–ª–∞–π–Ω –∫—É—Ä—Å –ø–æ AI", "–û—Å–≤—ñ—Ç–∞", -35),
                 (1200, "–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–û—Å–≤—ñ—Ç–∞", -40),
                 
                 (15000, "–ù–æ–≤–∏–π –Ω–æ—É—Ç–±—É–∫", "–Ü–Ω—à–µ", -45),
                 (2800, "–ù–∞–≤—É—à–Ω–∏–∫–∏", "–Ü–Ω—à–µ", -50),
                 (450, "–ö–∞–±–µ–ª—ñ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏", "–Ü–Ω—à–µ", -13),
            ]
        }
        
        for user_id, expenses in realistic_expenses.items():
            for amount, description, category_name, days_ago in expenses:
                expense_date = (datetime.now() + timedelta(days=days_ago)).strftime("%Y-%m-%d")
                category_id = category_map.get(category_name, 1)
                
                cursor.execute("""
                    INSERT INTO expenses (amount, description, category, category_id, date, created_at, updated_at, user_id)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, (amount, description, category_name, category_id, expense_date, current_time, current_time, user_id))
        
        print("üìä –°—Ç–≤–æ—Ä—é—é –±—é–¥–∂–µ—Ç–∏...")
        budgets_data = [
            (user_ids[0], "–ü—Ä–æ–¥—É–∫—Ç–∏ –Ω–∞ –º—ñ—Å—è—Ü—å", 5000, 3280, "monthly", category_map["–ü—Ä–æ–¥—É–∫—Ç–∏"]),
            (user_ids[0], "–†–æ–∑–≤–∞–≥–∏", 2000, 1570, "monthly", category_map["–†–æ–∑–≤–∞–≥–∏"]),
            (user_ids[1], "–°—ñ–º–µ–π–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏", 8000, 6940, "monthly", category_map["–ü—Ä–æ–¥—É–∫—Ç–∏"]),
            (user_ids[1], "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", 3000, 2450, "monthly", category_map["–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"]),
            (user_ids[1], "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ", 2500, 2100, "monthly", category_map["–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ"]),
            (user_ids[2], "–†–æ–∑–≤–∞–≥–∏", 5000, 6200, "monthly", category_map["–†–æ–∑–≤–∞–≥–∏"]),
            (user_ids[2], "–û—Å–≤—ñ—Ç–∞", 6000, 5700, "monthly", category_map["–û—Å–≤—ñ—Ç–∞"]),
        ]
        
        start_date = datetime.now().replace(day=1).strftime("%Y-%m-%d")
        end_date = (datetime.now().replace(day=1) + timedelta(days=32)).replace(day=1) - timedelta(days=1)
        end_date = end_date.strftime("%Y-%m-%d")
        
        for user_id, name, amount, spent, period, category_id in budgets_data:
            cursor.execute("""
                INSERT INTO budgets (name, amount, spent, period, start_date, end_date, category_id, is_active, created_at, updated_at, user_id)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (name, amount, spent, period, start_date, end_date, category_id, True, current_time, current_time, user_id))
        
        print("üéØ –°—Ç–≤–æ—Ä—é—é —Ü—ñ–ª—ñ –Ω–∞–∫–æ–ø–∏—á–µ–Ω—å...")
        goals_data = [
            (user_ids[0], "–ù–æ–≤–∏–π –Ω–æ—É—Ç–±—É–∫", "–ù–∞–∫–æ–ø–∏—á–∏—Ç–∏ –Ω–∞ —ñ–≥—Ä–æ–≤–∏–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è", 35000, 12500, "2024-06-01"),
            (user_ids[0], "–í—ñ–¥–ø—É—Å—Ç–∫–∞", "–ü–æ—ó–∑–¥–∫–∞ –¥–æ –Ñ–≤—Ä–æ–ø–∏ –≤–ª—ñ—Ç–∫—É", 25000, 8300, "2024-07-15"),
            (user_ids[1], "–î–∏—Ç—è—á–∏–π —Å–∞–¥–æ–∫", "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –¥–∏—Ç—è—á–æ–≥–æ —Å–∞–¥–∫–∞", 50000, 32000, "2024-09-01"),
            (user_ids[1], "–°—ñ–º–µ–π–Ω–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å", "–ù–∞–∫–æ–ø–∏—á–∏—Ç–∏ –Ω–∞ –Ω–æ–≤—É –º–∞—à–∏–Ω—É", 200000, 85000, "2025-03-01"),
            (user_ids[2], "–ö–≤–∞—Ä—Ç–∏—Ä–∞", "–ü–µ—Ä—à–∏–π –≤–Ω–µ—Å–æ–∫ –∑–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É", 500000, 180000, "2025-12-31"),
            (user_ids[2], "–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", "–°—Ç–∞—Ä—Ç–æ–≤–∏–π –∫–∞–ø—ñ—Ç–∞–ª –¥–ª—è —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π", 100000, 45000, "2024-12-31"),
        ]
        
        for user_id, title, description, target_amount, current_amount, target_date in goals_data:
            is_achieved = current_amount >= target_amount
            cursor.execute("""
                INSERT INTO goals (title, description, target_amount, current_amount, target_date, is_achieved, created_at, updated_at, user_id)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (title, description, target_amount, current_amount, target_date, is_achieved, current_time, current_time, user_id))
        
        conn.commit()
        conn.close()
        
        print("‚úÖ –†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
        print(f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(test_users)}")
        print(f"üí∞ –í–∏—Ç—Ä–∞—Ç: {sum(len(expenses) for expenses in realistic_expenses.values())}")
        print(f"üìä –ë—é–¥–∂–µ—Ç—ñ–≤: {len(budgets_data)}")
        print(f"üéØ –¶—ñ–ª–µ–π: {len(goals_data)}")
        print("\nüîë –¢–µ—Å—Ç–æ–≤—ñ –∞–∫–∞—É–Ω—Ç–∏:")
        for email, name, password in test_users:
            print(f"  üìß {email} | üë§ {name} | üîí {password}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö: {e}")

def reset_database():
    try:
        conn = sqlite3.connect('data.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        
        print("üóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        for table in tables:
            table_name = table[0]
            cursor.execute(f"DELETE FROM {table_name};")
            print(f"  ‚úÖ –û—á–∏—â–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—é: {table_name}")
        
        conn.commit()
        conn.close()
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –æ—á–∏—â–µ–Ω–∞!")
        print("üí° –ó–∞–ø—É—Å—Ç—ñ—Ç—å seed_database() –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –ë–î: {e}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        if command == "check":
            check_database()
        elif command == "seed":
            seed_database()
        elif command == "test":
            create_realistic_test_data()
        elif command == "reset":
            reset_database()
        else:
            print("–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: check, seed, test, reset")
    else:
        print("–£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ë–î:")
        print("  python utils.py check  - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ë–î")
        print("  python utils.py seed   - –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏")
        print("  python utils.py test   - —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ")
        print("  python utils.py reset  - –æ—á–∏—Å—Ç–∏—Ç–∏ –ë–î") 